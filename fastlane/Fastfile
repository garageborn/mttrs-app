# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version '2.7.0'

default_platform :ios

platform :ios do
  before_all do
    # ENV['SLACK_URL'] = 'https://hooks.slack.com/services/...'
  end

  desc 'Runs all the tests'
  lane :test do
    scan
  end

  desc 'Submit a new Beta Build to Apple TestFlight'
  desc 'This will also make sure the profile is up to date'
  lane :beta do
    # UI.important 'Important Message'
    # UI.error 'O NO!'
    # UI.message 'Basic blah'
    # answer = UI.select('Would you like to add a Changelog?', ['Yes', 'No'])
    # changelog = ask('Type Changelog message:') if answer == 'Yes'

    # always get latest certificates/provisioning profiles
    match(type: 'appstore') # more information: https://codesigning.guide

    increment_build_number(
      xcodeproj: './ios/mttrs.xcodeproj'
    )

    gym(
      scheme: 'mttrs',
      project: './ios/mttrs.xcodeproj'
    ) # Build your app - more options available
    pilot(
      skip_waiting_for_build_processing: true
    )

    # sh 'your_script.sh'
    # You can also use other beta testing services here (run `fastlane actions`)
  end

  desc 'Deploy a new version to the App Store'
  lane :release do
    # match(type: 'appstore')
    # snapshot
    gym(scheme: 'mttrs') # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: 'Successfully deployed new App Update.'
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

platform :android do
  before_all do
    # ENV['SLACK_URL'] = 'https://hooks.slack.com/services/...'
  end

  desc 'Submit a new Alpha Build to Play Store'
  lane :alpha do
    build_file_path = File.expand_path('../../android/app/build.gradle', __FILE__)
    new_content = File.read(build_file_path).tap do |build_file|
      matcher = /versionCode\s+(\d+)/.freeze
      versionCode = build_file[matcher, 1].to_i
      build_file[matcher, 1] = (versionCode + 1).to_s
      build_file
    end
    File.write(build_file_path, new_content)

    gradle(task: 'clean', project_dir: 'android/') # Clean the Gradle project
    gradle(task: 'assemble', build_type: 'Release', project_dir: 'android/') # Build the Release APK
    supply(track: 'alpha', apk: 'android/app/build/outputs/apk/app-release.apk') # Upload the APK to the Play Store (alpha)
  end

  after_all do |lane|
    # slack(channel: 'deploys', message: 'Successfully deployed new mttrs alpha update to the Play Store.')
  end
end
# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
